#!/bin/sh -eu


IMAGE_NAME="nix-example-app"
TARBALL="example-app.tar.gz"
NIX_CACHE_CONTAINER="nix-cache"
PORT="8081"

PROJECT_ROOT="$(dirname "$0")/.."
UID="$(id -u)"
GID="$(id -g)"


main()
(

    trap "cleanup" EXIT
    cleanup

    if ! nix_cache_exists
    then create_nix_cache
    fi

    nix_build_in_docker_run
    docker_build
    docker_run

)


nix_cache_exists()
(
    docker inspect "$NIX_CACHE_CONTAINER" 1>/dev/null 2>/dev/null
)


create_nix_cache()
(
    docker create --name "$NIX_CACHE_CONTAINER" --volume /nix nixos/nix true
)


nix_build_in_docker_run()
(
    docker run \
        --rm \
        --volume "$(abspath "$PROJECT_ROOT")":/mnt \
        --volumes-from "$NIX_CACHE_CONTAINER" \
        nixos/nix \
        sh -c "
            nix-build \
                --attr example-tarball \
                /mnt/build.nix
            cp result /mnt/example-app.tar.gz
            rm result
            chown $UID:$GID /mnt/example-app.tar.gz"
)


docker_build()
(
    docker build --tag "$IMAGE_NAME" "$PROJECT_ROOT"
)


docker_run()
(
    docker run --rm --interactive --tty --publish "$PORT:$PORT" "$IMAGE_NAME"
)


cleanup()
(
    rm -rf "$PROJECT_ROOT/$TARBALL"
    docker rmi "$IMAGE_NAME" 2> /dev/null || true
)


abspath()
{
    local target="$1"
    local old_pwd
    old_pwd="$(pwd)"
    cd "$(dirname "$target")"
    while [ -L "$target" ]; do
        target="$(readlink "$target")"
        cd "$(dirname "$target")"
    done
    echo "$(pwd -P)/$(basename "$target")"
    cd "$old_pwd"
}


main
